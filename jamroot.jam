# jamroot for CPP_PROJECTS

# ----------------------------------------------------------------------#
# imports 
# ----------------------------------------------------------------------#

import ./tools/default-install ;
import ./tools/rootcling ;
import type ;
import os ;

# ----------------------------------------------------------------------#
# External Sources and programs
# ----------------------------------------------------------------------#

# BOOST
local BOOST_CURRENT = [ os.environ BOOST_CURRENT ] ;
use-project /boost : $(BOOST_CURRENT) ;

# ROOT
# register .C files for ROOT macros
type.register-suffixes C : CPP ; 

local ROOTSYS = [ os.environ ROOTSYS ] ;
path-constant ROOT_PATH : $(ROOTSYS) ;
use-project /root       : ./external_libs/build/root ;

path-constant ROOFIT_PATH : $(ROOTSYS) ;
use-project /roofit       : ./external_libs/build/roofit ;

# ----------------------------------------------------------------------#
# reusable packages 
# ----------------------------------------------------------------------#

# ROOT tools
#path-constant ROOT_TOOLS : ./libs/root_tools ;
#use-project /root_tools  : ./libs/root_tools ;

# Language tools
path-constant LANGUAGE_TOOLS : ./libs/language_tools ;
use-project /language_tools  : ./libs/language_tools ;

# ----------------------------------------------------------------------#
# define the project
# ----------------------------------------------------------------------#

# change the suffix from dylib to so on MACOSX
type.change-generated-target-suffix SHARED_LIB : <target-os>darwin : so ;

# path to project
path-constant CPP_PROJECTS : ./ ;

# build directory
path-constant build-dir : ./bin/temp ;

# install exe directory
path-constant install-dir : ./bin ;
set-install-dir $(install-dir) ;

# install lib directory
path-constant install-lib : ./lib ;

# define project
project cpp_projects
  : build-dir
    $(build-dir)
  : default-build release
  ;

build-project $(LANGUAGE_TOOLS) ;
build-project $(BOOST_CURRENT) ;
